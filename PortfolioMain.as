package {		/*	-=] The main document class for the CW D&D [=-	-=] language version ActionScript 3.0 [=-	-=] player version Flash 10.0 [=-	-=] author Christian Worley [=-	-=] created 01/2011 [=-	*/	//:::::::::::::::::::::::::::::::::::::::::::::::::	// Imports	//:::::::::::::::::::::::::::::::::::::::::::::::::	import com.cw.controls.contactButton.ContactButton;;//	import com.cw.controls.dynamicButton.DynamicButton;	import com.cw.data.bitmaps.BitmapLoader;	import com.cw.data.parse.parseLabels;	import com.cw.patterns.mediator.ConcreteColleague1;	import com.cw.patterns.mediator.ConcreteColleague2;	import com.cw.patterns.mediator.ConcreteMediator;	import com.cw.patterns.mediator.Mediator;	import com.cw.stageAlignments.StageAlignment;	import com.cw.stageAlignments.StageResize;	import com.cw.utilities.FullScreenToggle;	import com.cw.utilities.MovieClipChildren;	import com.cw.utilities.t;	import com.cw.visuals.Flip3DOpen1;	import com.cw.visuals.Flip3DOpen2;	import com.cw.visuals.Flip3DOpen3;	import com.cw.visuals.Flip3DOpen4;	import com.cw.visuals.Flip3DOpen5;	import com.cw.visuals.animations.NameAnime;	import com.cw.visuals.color.ApplyColorChange;	import com.cw.visuals.color.AverageBitmapColor;	import com.cw.visuals.navigationBar.NavigationBar;	import com.cw.visuals.shapeCreators.CreateShape;	import com.greensock.*;	import com.greensock.easing.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.CapsStyle;	import flash.display.GradientType;	import flash.display.LineScaleMode;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.utils.ByteArray;	import flash.utils.getDefinitionByName;

	//:::::::::::::::::::::::::::::::::::::::::::::::::	// Class characteristics	//:::::::::::::::::::::::::::::::::::::::::::::::::	public class PortfolioMain extends MovieClip {		//:::::::::::::::::::::::::::::::::::::::::::::::::		// Public Static Constants		//:::::::::::::::::::::::::::::::::::::::::::::::::		//public static var mainMC:main_mc = new main_mc();		public static var content_stage:main_mc_content_stage = new main_mc_content_stage();		//public static var swfStage:Stage;		//public static var stageCurrentAlignment:String;		//:::::::::::::::::::::::::::::::::::::::::::::::::		// Public Variables		//:::::::::::::::::::::::::::::::::::::::::::::::::		public var evt:String;		public var target_mc:MovieClip;		//public var TheStageAlignment:StageAlignment = new StageAlignment();		public var stageCurrentAlignment:String;		//:::::::::::::::::::::::::::::::::::::::::::::::::		// Private Variables		//:::::::::::::::::::::::::::::::::::::::::::::::::		private var mainMC:main_mc = new main_mc();				private var swfStage:Stage;		private var theStageAlignment:String;				private var empty_mc:Loader=new Loader();		private var loaderBG:Loader = new Loader();		private var swfWidth:int;		private var swfHeight:int;		private var navSize_height:Number = 400;		private var navSize_width:Number = 1000;		private var my_current_x:Number;		private var my_current_y:Number;		private var main_mc_BGTopY:Number;		private var main_mc_BGCenterY:Number;		private var main_mc_BGBottomY:Number;		private var alignment_bttn_count:Number = 9;		private var stageBorderBuffer:Number = 5;		//private var stageCurrentAlignment:String = '';				private var BG_mc:theBG = new theBG();		private var the_mc:mc = new mc();		private var the_mc1:mc = new mc();		private var the_mc2:mc = new mc();		private var placementTarget:MovieClip = mainMC.content_stage;		private var placement_contents:MovieClip;		private var main_mc_BG:MovieClip;		private var Flipout5:Flip3DOpen5 = new Flip3DOpen5();		private var the_Center_placement0:MovieClip;		//:::::::::::::::::::::::::::::::::::::::::::::::::		// Constructor		//:::::::::::::::::::::::::::::::::::::::::::::::::		public function PortfolioMain () {			init();		}		private function init () {			createStage();			addBG_mc();			addMainMC();			this.addEventListener(Event.ADDED_TO_STAGE, startThePage);		}		private function createStage () {			stage.addChild (empty_mc);			swfStage = empty_mc.stage;		}		private function addBG_mc():void {			TweenMax.to (BG_mc, 0, {alpha:0});			swfStage.addChild (BG_mc);			var randomNumber:uint = Math.round(Math.random() * (8 - 0) + 0);			var imagesReference:String ='./images/BG_IMG_'+randomNumber+'.png';			var BitmapLoaderBG:BitmapLoader = new BitmapLoader();			BitmapLoaderBG.LoadBitmap(imagesReference, BG_mc, 10, 10);			loaderBG.load(new URLRequest(imagesReference));			loaderBG.contentLoaderInfo.addEventListener(Event.COMPLETE, loaderBGLoaded);		}		private function loaderBGLoaded(BGloadedEvent:Event):void{			var image:Bitmap = Bitmap(loaderBG.content);			var bitmap:BitmapData = image.bitmapData;			getAverageBGColor(bitmap);		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// target a bitmap and get it's average hex color		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function getAverageBGColor(theBitmap:BitmapData){			var theAverageColor:uint = AverageBitmapColor.averageColor( theBitmap );			setContentAreaBGColor(theAverageColor);		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// target object and pass it the new hex color reference		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function setContentAreaBGColor(theAverageColor:uint){			var colorChange0:ApplyColorChange = new ApplyColorChange();			colorChange0.ApplyColorTransform(mainMC.main_mc_BG, theAverageColor)			var colorChange1:ApplyColorChange = new ApplyColorChange();			colorChange1.ApplyColorTransform(mainMC.content_stage.stageBG, theAverageColor)		}		private function addMainMC():void {			swfStage.addChild (mainMC);			addNameAnime()			addDefautContentButtons();			addNavigationBar()			this.addEventListener(Event.ADDED_TO_STAGE, addStageAlignment);		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// DynamicButton, by both name and type; placementTarget:MovieClip, xPlacement:int, yPlacement:int, textContent:String		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function addDefautContentButtons():void{/*			var contactButton:DynamicButton = new DynamicButton();			contactButton.buttonInterface(mainMC, 235, -33, 'Contact');*/			var contactButton:ContactButton = new ContactButton();			contactButton.buttonInterface(mainMC, 235, -33, 'Contact');		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// add the Stage Alignment Button Event Listener and pass it the targeted a stage reference and MovieClip reference		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function addStageAlignment(AddedToStage:Event):void {			var TheStageAlignment:StageAlignment = new StageAlignment();			TheStageAlignment.addStageAlignmentEventListeners(swfStage, mainMC)		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// invoke addNavigationBar and pass the Class interface a stage reference		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function addNameAnime():void {			var theNameAnime:NameAnime = new NameAnime();			theNameAnime.nameAnimeInterface(mainMC, 0, -150);		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// invoke addNavigationBar and pass the Class interface a stage reference		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function addNavigationBar():void {			var TheNavigationBar:NavigationBar = new NavigationBar();			TheNavigationBar.updateStageReference(swfStage)		}		private function startThePage (theAddToStageEvent:Event):void {			TweenMax.to (mainMC, 0, {alpha:0, scaleX:5, scaleY:5, y:-25, x:-25, rotationY:-180});			TweenMax.to (BG_mc, 2.5, {delay:1, alpha:1, rotationY:0, onComplete:pushToTheMiddle });			swfStage.scaleMode = StageScaleMode.NO_SCALE;			swfStage.align = StageAlign.TOP_LEFT;			this.swfWidth = swfStage.stageWidth;			this.swfHeight = swfStage.stageHeight;			navigationStage ();		}		private function navigationStage () {			TweenMax.to (mainMC.content_stage.stageBG, 1.5, {height:navSize_height-50, width:navSize_width-50, ease:Sine.easeOut});			TweenMax.to (mainMC.main_mc_BG, 3, {height:navSize_height, width:navSize_width, ease:Sine.easeOut});			main_mc_BGTopY = mainMC.main_mc_BG.y-(navSize_height)/2;			main_mc_BGCenterY = mainMC.main_mc_BG.y;			main_mc_BGBottomY = ((mainMC.main_mc_BG.y)+(navSize_height)/2);			TweenMax.to (mainMC.alignment_bttn_0, 1.5, {y:main_mc_BGTopY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_1, 1.5, {y:main_mc_BGTopY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_2, 1.5, {y:main_mc_BGTopY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_3, 1.5, {y:main_mc_BGCenterY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_4, 1.5, {y:main_mc_BGCenterY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_5, 1.5, {y:main_mc_BGCenterY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_6, 1.5, {y:main_mc_BGBottomY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_7, 1.5, {y:main_mc_BGBottomY, ease:Sine.easeOut});			TweenMax.to (mainMC.alignment_bttn_8, 1.5, {y:main_mc_BGBottomY, ease:Sine.easeOut});		}		//:::::::::::::::::::::::::::::::::::::::::::::::::		// Reposition the movieclip to stage center		//:::::::::::::::::::::::::::::::::::::::::::::::::		private function pushToTheMiddle () {			mainMC.x = (swfWidth*.5);			mainMC.y = (swfHeight*.5);			TweenMax.to (mainMC, 1, {alpha:1, scaleX:1, scaleY:1, x:swfWidth*.5, y:swfHeight*.5,/* z:0,*/ rotationY:0, ease:Sine.easeOut, onComplete:pushToTheMiddleComplete});		}		private function pushToTheMiddleComplete () {			//:::::::::::::::::::::::::::::::::::::::::::::::::			// params for Flipout5.addToDisplay are, by both name and type, the placementTarget:MovieClip, the_mcX:Number, the_mcY:Number, imagePath:String, imageName:String, imageType:String			//:::::::::::::::::::::::::::::::::::::::::::::::::			Flipout5.addToDisplay(placementTarget, -31, -45, './images/', 'TheRaven_0', '.png');			//:::::::::::::::::::::::::::::::::::::::::::::::::			// to view all the contents of a MC by type pass the MC's ref to targetMc			//:::::::::::::::::::::::::::::::::::::::::::::::::			//new MovieClipChildren(mainMC.nameMC.nameContentMC);		}	}}