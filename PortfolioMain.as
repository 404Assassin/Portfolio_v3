package {	/**	 -=]	The main document class for:	CW D&D  			[=-	 -=]	language version:				ActionScript 3.0	[=-	 -=]	player version:					Flash 10.0			[=-	 -=]	author:							Christian Worley	[=-	 -=]	created:						01/2011				[=-	 */	//:::::::::::::::::::::::::::::::::::::::::::::::::	// Imports	//:::::::::::::::::::::::::::::::::::::::::::::::::	import com.cw.controls.textButtons.ContactButton;	import com.cw.data.bitmaps.BitmapLoader;	import com.cw.data.javascript.Shadowbox;	//import com.shiftarray.ShadowBox;	import com.cw.data.parse.parseLabels;	import com.cw.patterns.mediator.ConcreteColleague1;	import com.cw.patterns.mediator.ConcreteColleague2;	import com.cw.patterns.mediator.ConcreteMediator;	import com.cw.patterns.mediator.Mediator;	import com.cw.patterns.observer.IInvokedObserver;	import com.cw.patterns.observer.InvokedObserver;	import com.cw.stageAlignments.StageAlignment;	import com.cw.stageAlignments.StageResize;	import com.cw.utilities.FullScreenToggle;	import com.cw.utilities.MovieClipChildren;	import com.cw.utilities.Observable;	import com.cw.utilities.loaders.FontSWFLoader;	import com.cw.utilities.preloaders.FourBarPreloader;	import com.cw.visuals.BackgroundHandler;	import com.cw.visuals.animations.NameAnime;	import com.cw.visuals.color.ApplyColorChange;	import com.cw.visuals.color.AverageBitmapColor;	import com.cw.visuals.contentArea.ContentArea;	import com.cw.visuals.flipOpen3D.Flip3DOpen1;	import com.cw.visuals.flipOpen3D.Flip3DOpen2;	import com.cw.visuals.flipOpen3D.Flip3DOpen3;	import com.cw.visuals.flipOpen3D.Flip3DOpen4;	import com.cw.visuals.flipOpen3D.Flip3DOpen5;	import com.cw.visuals.navigationBar.NavigationBar;	import com.cw.visuals.shapeCreators.CreateShape;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.CSSLoader;	import com.greensock.loading.ImageLoader;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.SelfLoader;	import com.greensock.loading.XMLLoader;	import com.greensock.loading.data.LoaderMaxVars;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.CapsStyle;	import flash.display.GradientType;	import flash.display.LineScaleMode;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.text.AntiAliasType;	import flash.text.Font;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.utils.ByteArray;	import flash.utils.getDefinitionByName;

	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::	// Class characteristics	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::	public class PortfolioMain extends MovieClip implements IInvokedObserver{		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		// Public Static Constants		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		//public static const ShadowBox:ShadowBox;		//public static var content_stage:main_mc_content_stage = new main_mc_content_stage();		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		// Public Variables		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		public var evt:String;		public var target_mc:MovieClip;		public var stageCurrentAlignment:String;		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		// Private Variables		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		private var mainMC:main_mc = new main_mc();		private var contactObserver:InvokedObserver = new InvokedObserver();		private var backgroundObserver:InvokedObserver = new InvokedObserver();		private var fontLoadObserver:InvokedObserver = new InvokedObserver();		private var swfStage:Stage;		private var theStageAlignment:String;				private var theFourBarPreloader:FourBarPreloader;		private var empty_mc:Loader=new Loader();		private var loaderBG:Loader = new Loader();		private var swfWidth:int;		private var swfHeight:int;		private var navSize_height:Number = 400;		private var navSize_width:Number = 1000;		private var my_current_x:Number;		private var my_current_y:Number;		private var main_mc_BGTopY:Number;		private var main_mc_BGCenterY:Number;		private var main_mc_BGBottomY:Number;		private var alignment_bttn_count:Number = 9;		private var stageBorderBuffer:Number = 5;				private var BG_mc:theBG = new theBG();		private var the_mc:mc = new mc();		private var the_mc1:mc = new mc();		private var the_mc2:mc = new mc();		private var placementTarget:MovieClip = mainMC.content_stage;		private var placement_contents:MovieClip;		private var main_mc_BG:MovieClip;		private var Flipout5:Flip3DOpen5 = new Flip3DOpen5();		private var the_Center_placement0:MovieClip;		private var loadSWFFonts:FontSWFLoader = new FontSWFLoader();		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		// Constructor		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		public function PortfolioMain () {			init();		}		private function init () {			stage.addChild (empty_mc);			swfStage = empty_mc.stage;			swfStage.scaleMode = StageScaleMode.NO_SCALE;			swfStage.align = StageAlign.TOP_LEFT;			addStageContent();		}		private function addStageContent() {			loadFont();		}		private function loadFont(){			loadSWFFonts.fontSWFLoaderInterface('./fonts/fontENTrebuchetMS.swf');			loadSWFFonts.observableInstanceRef(fontLoadObserver);			observableInstanceRef(fontLoadObserver);		}		public function observableInstanceRef(fontLoadObserver:InvokedObserver):void{			this.fontLoadObserver = fontLoadObserver;			fontLoadObserver.addObserver(this)		}		public function update(theObserver:InvokedObserver, infoObject:Object):void {			loadExternalAssets();		}		private function loadExternalAssets():void{			progressBarCreation()			//////////////			//create a LoaderMax named "mainQueue" and set up onProgress, onComplete and onError listeners			LoaderMax.activate([ImageLoader, CSSLoader]);			//changes the default auditSize to false for all LoaderMax instances created after this point			LoaderMax.defaultAuditSize = false;			var queue:LoaderMax = new LoaderMax({name:"mainQueue", onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler, auditSize:true});			//var queue:LoaderMax = new LoaderMax(new LoaderMaxVars().name("mainQueue").maxConnections(2).onComplete(completeHandler).onProgress(progressHandler) );						//append several loaders			queue.append( new SelfLoader(this, {estimatedBytes:121000}) );			queue.append( new CSSLoader("./css/flashSiteStyles.css", {name:"flashStyleSheet", requireWithRoot:this.root, estimatedBytes:4000}) );			queue.append( new XMLLoader("./xml/siteAssets.xml", {name:"xmlDoc", alternateURL:"http://worleydev.com/test/portfolio_v3/xml/siteAssets.xml", estimatedBytes:150000}) );/*			queue.append( new ImageLoader("img/photo1.jpg", {name:"photo1", estimatedBytes:2400, container:this, alpha:0, width:250, height:150, scaleMode:"proportionalInside"}) );			queue.append( new SWFLoader("swf/main.swf", {name:"mainClip", estimatedBytes:3000, container:this, x:250, autoPlay:false}) );*/						//add a loader to the top of the queue using prepend()/*			queue.prepend( new MP3Loader("mp3/audio.mp3", {name:"audio", repeat:100, autoPlay:true}) );*/						//prioritize the loader named "photo1"			//LoaderMax.prioritize("photo1");  			//same as LoaderMax.getLoader("photo1").prioritize();						//start loading			queue.load();			///////////////*			var config:LoaderMaxVars = new LoaderMaxVars();			config.name("queue1");			config.onComplete(completeHandler);			config.onProgress(progressHandler);			config.maxConnections(1);			var queue1:LoaderMax = new LoaderMax(config);			LoaderMax.activate([ImageLoader, CSSLoader]);			queue1 = XMLLoader("./xml/siteAssets.xml", {onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler});			queue1.load();*/			/////////////			//LoaderMax.activate([ImageLoader, CSSLoader]);			//var loader:XMLLoader = new XMLLoader("./xml/siteAssets.xml", {onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler/*, estimatedBytes:1000000*/});			//loader.load();		}		private function progressBarCreation():void {			var stageWidth = swfStage.stageWidth;			var stageHeight = swfStage.stageHeight;			var barPlacementX:int = stageWidth * .5;			var barPlacementY:int = stageHeight * .5;			var assetsPreloader:MovieClip = new MovieClip();			swfStage.addChild(assetsPreloader);			theFourBarPreloader = new FourBarPreloader();			theFourBarPreloader.preloaderInterface(swfStage, assetsPreloader)		}		private function progressHandler(loaderEvent:LoaderEvent):void {			theFourBarPreloader.progressHandlerInterface(loaderEvent);		}		private	function completeHandler(event:LoaderEvent):void {			theFourBarPreloader.progressCompleteInterface();			addBG_mc();			addNavigationBar()			addMainMC();		}		private	function errorHandler(event:LoaderEvent):void {			//trace("error occured with " + event.target + ": " + event.text);		}		private function addMainMC():void {			trace("@ addMainMC");			var mainContentArea:ContentArea = new ContentArea();			mainContentArea.ContentAreaInterface(swfStage);			mainContentArea.observableInstanceRef(backgroundObserver);		}		private function addBG_mc():void {			var theBackgroundHandler:BackgroundHandler = new BackgroundHandler();			theBackgroundHandler.BackgroundHandlerInterface(swfStage);			theBackgroundHandler.observableInstanceRef(backgroundObserver);		}				//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		// invoke addNavigationBar and pass the Class interface a stage reference		//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::		private function addNavigationBar():void {			var TheNavigationBar:NavigationBar = new NavigationBar();			TheNavigationBar.updateStageReference(swfStage)		}		private function whatAreTheMCContents () {			//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::			// to view all the contents of a MC by type pass the MC's ref to targetMc			//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::			//new MovieClipChildren(mainMC.nameMC.nameContentMC);		}	}}